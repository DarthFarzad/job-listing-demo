{"version":3,"sources":["reducer.js","actions.js","components/header/index.js","components/filterButton/index.js","components/filters/index.js","components/card/index.js","containers/jobs/index.js","components/footer/index.js","App.js","serviceWorker.js","index.js"],"names":["reducer","state","type","payload","filters","includes","filter","jobs","length","job","role","level","languages","some","language","tools","tool","data","initialState","Header","src","alt","className","FilterButton","useContext","Context","dispatch","onClick","Filters","map","key","Card","props","handleFilter","company","logo","featured","position","postedAt","contract","location","isNew","new","isFeatured","data-featured","Jobs","id","Footer","href","target","createContext","App","useReducer","Provider","value","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c1677d73.chunk.js","sourcesContent":["import data from './data.json';\nimport {TOGGLE_FILTER, CLEAR_FILTER} from './actions';\n\nexport const reducer = (state, { type, payload }) =>{\n    switch(type){\n        case TOGGLE_FILTER:\n            const filters = state.filters.includes(payload) ? state.filters.filter(filter => filter !== payload) : [...state.filters, payload];\n            const jobs = filters.length ? state.jobs\n                .filter(job =>\n                    filters.includes(job.role) ||\n                    filters.includes(job.level) ||\n                    filters.includes(job.role) ||\n                    job.languages.some(language => filters.includes(language)) ||\n                    job.tools.some(tool=> filters.includes(tool))) : data;\n            return {...state, jobs, filters};\n        case CLEAR_FILTER:\n            return initialState;\n        default:\n            return state;\n    }\n}\n\nexport const initialState = { jobs: data, filters: [] };","export const TOGGLE_FILTER = \"TOGGLE_FILTER\";\nexport const CLEAR_FILTER = \"CLEAR_FILTER\";","import React from \"react\";\nimport './header.scss';\n\nconst Header = () => (<header>\n    <img src=\"/images/bg-header-mobile.svg\" alt=\"\" className=\"d-md-none\"/>\n    <img src=\"/images/bg-header-desktop.svg\" alt=\"\" className=\"d-none d-md-block\"/>\n</header>);\n\nexport default Header;","import React, {useContext} from \"react\";\nimport {Context} from \"../../App\";\nimport \"./filter_button.scss\";\nimport {TOGGLE_FILTER} from \"../../actions\";\n\nexport default function FilterButton({ filter }) {\n    const [data, dispatch] = useContext(Context);\n    const toggleFilter = payload => dispatch({type: TOGGLE_FILTER, payload})\n    return  (<article className=\"filter-button\">{filter}<span className=\"filter-button__icon\" onClick={()=>toggleFilter(filter)}></span></article>)\n}","import React, { useContext } from \"react\";\nimport {Context} from \"../../App\";\nimport {CLEAR_FILTER} from \"../../actions\";\nimport \"./filters.scss\";\nimport FilterButton from \"../filterButton\";\n\nexport default function Filters() {\n    const [{filters}, dispatch] = useContext(Context);\n    const clearFilter = () => dispatch({type: CLEAR_FILTER});\n\n    return filters.length > 0 && (<section className=\"filter\">\n        <div className=\"filter__items\">\n            {filters.map(filter => <FilterButton key={filter} filter={filter}/>)}\n        </div>\n        <a className=\"filter__clear-button\" onClick={clearFilter}>clear</a>\n    </section>);\n}","import React, { useContext } from \"react\";\nimport { Context } from \"../../App\";\nimport { TOGGLE_FILTER } from '../../actions';\nimport './card.scss';\n\nconst Card = (props) => {\n    const [data, dispatch] = useContext(Context);\n    const handleFilter = payload => dispatch({ type: TOGGLE_FILTER, payload });\n\n    const { company,logo, featured, position, role, level, postedAt, contract, location, languages, tools} = props\n    const isNew = props.new && <span className=\"chip chip--new\">New!</span>;\n    const isFeatured = featured && <span className=\"chip chip--featured\">Featured</span>;\n    return (\n        <article className=\"card\" data-featured={featured}>\n            <h4 className=\"card__heading\">{company} {isNew} {isFeatured}</h4>\n            <img src={logo} alt={`logo for ${company}`} />\n            <h6 className=\"position\">{position}</h6>\n            <ul className=\"card__information\">\n                <li>{postedAt}</li>\n                <li>{contract}</li>\n                <li>{location}</li>\n            </ul>\n            <ul className=\"card__tags\">\n                    <li onClick={()=> handleFilter(role)}>{role}</li>\n                    <li onClick={()=> handleFilter(level)}>{level}</li>\n                    {languages && languages.map(language => <li key={language} onClick={()=> handleFilter(language)}>{language}</li>) }\n                    {tools && tools.map(tool => <li key={tool} onClick={()=> handleFilter(tool)}>{tool}</li>)}\n            </ul>\n        </article>);\n}\n\nexport default Card;","import React, { useContext } from \"react\";\nimport { Context } from \"../../App\";\nimport Card from \"../../components/card\";\n\nexport default function Jobs() {\n    const [{jobs}] = useContext(Context);\n    return <section className=\"list\">{jobs.map(job => <Card key={job.id} {...job}/>)}</section>;\n}","import React from \"react\";\n\nexport default function Footer() {\n    return (<footer>\n        Challenge by <a href=\"https://www.frontendmentor.io?ref=challenge\" target=\"_blank\">Frontend Mentor</a>.\n        Coded By <a href=\"https://slamdien.co.za/\" target=\"_blank\">Farzad Slamdien</a>\n    </footer>)\n}","import React, { createContext, useReducer } from 'react';\nimport {reducer, initialState } from './reducer';\nimport './App.scss';\nimport Header from \"./components/header\";\nimport Filters from './components/filters';\nimport Jobs from \"./containers/jobs\";\nimport Footer from './components/footer';\n\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return (\n      <Context.Provider value={[state, dispatch]}>\n          <Header />\n          <section className=\"container bg--light-gray\">\n              <Filters />\n              <Jobs />\n          </section>\n          <Footer/>\n      </Context.Provider>\n  );\n}\n\nexport const Context = createContext(initialState);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}